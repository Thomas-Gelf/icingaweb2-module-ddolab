const NodeName = "i2-master1"
const ZoneName = NodeName
const PluginDir = "/usr/lib/nagios/plugins"
object Endpoint NodeName {}
object Zone ZoneName {
  endpoints = [ NodeName ]
}

include <itl>
include <plugins>
include <windows-plugins>
include "conf.d/commands.conf"

object Zone "director-global" {
  global = true
}

object ApiListener "api" {
  cert_path = SysconfDir + "/icinga2/pki/" + NodeName + ".crt"
  key_path = SysconfDir + "/icinga2/pki/" + NodeName + ".key"
  ca_path = SysconfDir + "/icinga2/pki/ca.crt"
  accept_config = true
}

library "checker"
object CheckerComponent "checker" { }

template Host "dummy-host" {
  check_command = "dummy"
  address = "127.0.0.1"
  check_interval = 1m
  retry_interval = 30s
  vars.dummy_state = {{
    if (Math.random() * 1000 > 990) {
      return 1
    } else {
      return 0
    }
  }}
  vars.dummy_text = "It's fine or not"
  enable_notifications = false
}

globals.nextRandomHost = 0
globals.nextLocalHost = 0
globals.desiredNum = 0

globals.createNextRandomHost = function() {
  globals.nextRandomHost += 1
  var name = "random" + globals.nextRandomHost
  object Host name {
    import globals.desiredTemplate
  }
}

globals.createRandomHosts = function() {
  var cnt = 0
  var num = globals.desiredNum
  while (cnt < num) {
    cnt += 1
    globals.createNextRandomHost()
  }
}

globals.addRandomHosts = function(num, tpl) {
  globals.desiredTemplate = tpl
  globals.desiredNum = num
  Internal.run_with_activation_context(globals.createRandomHosts)
}

